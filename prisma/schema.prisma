
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid()) // Matches Supabase auth.users ID
  email     String   @unique
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())

  bookings  Booking[]
  properties Property[]
  payments   Payment[]
}

model Property {
  id          String   @id @default(uuid())
  name        String
  location    String
  pricePerNight Float
  ownerId     String
  createdAt   DateTime @default(now())

  owner       User @relation(fields: [ownerId], references: [id])
  bookings    Booking[]
  availability PropertyAvailability[]
}

model Booking {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  checkIn    DateTime
  checkOut   DateTime
  status     BookingStatus @default(PENDING)
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])
  payment    Payment?
  availability PropertyAvailability[]
}

model Payment {
  id         String   @id @default(uuid())
  bookingId  String   @unique
  userId     String
  amount     Float
  status     PaymentStatus @default(PENDING)
  createdAt  DateTime @default(now())

  booking    Booking @relation(fields: [bookingId], references: [id])
  user       User    @relation(fields: [userId], references: [id])
}

model PropertyAvailability {
  id          String   @id @default(uuid())
  property_id String
  date        DateTime @db.Date
  status      String   @default("available")
  price       Float?
  booking_id  String?
  updated_at  DateTime @default(now())

  property    Property @relation(fields: [property_id], references: [id], onDelete: Cascade)
  booking     Booking? @relation(fields: [booking_id], references: [id], onDelete: SetNull)

  @@unique([property_id, date])
  @@map("property_availability")
}

enum Role {
  USER
  ADMIN
  OWNER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
